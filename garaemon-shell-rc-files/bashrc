# -*- mode: shell-script -*-
# DO NOT EDIT THIS FILE, EDIT .bashrc.mine

# If not running interactively, don't do anything
if [ -z "$PS1" ]; then
    INTERACTIVEP=false
else
    INTERACTIVEP=true
fi
# append to the history file, don't overwrite it
shopt -s histappend

# sharing the history among many terminals
function share_history {
    history -a
    history -c
    history -r
}

PROMPT_COMMAND='share_history'
shopt -u histappend
export HISTSIZE=9999
export HISTCONTROL=ignoredups 

function quiet_echo() {
    args="$@"
    if [ "$INTERACTIVEP" == "true" ]; then
        echo $args
    fi
}

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# prompt
GREEN='\[\033[1;32m\]'
YELLOW='\[\033[1;33m\]'
BLUE='\[\033[1;34m\]'
LIGHT_BLUE='\[\033[1;36m\]'
DEFAULT='\[\033[1;0m\]'

PS1="${LIGHT_BLUE}Yes, Master${DEFAULT}@${GREEN}\h?${DEFAULT}[${BLUE}\w${DEFAULT}]\$ "

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    eval "`dircolors -b`"
    alias ls='ls --color=auto'
    alias grep='grep --color=auto'
fi

# aliases
alias cp='cp -v'
alias mv='mv -v'

# you always need to cal init_ssh_agent when you want to activate ssh-agent
init_ssh_agent () {
    eval `ssh-agent`
    ssh-add
    if [ $? = "0" ]; then
        local agent="$HOME/.tmp/ssh-agent/`hostname`_local"
        ln -snf "$SSH_AUTH_SOCK" $agent && export SSH_AUTH_SOCK=$agent
    else
        echo "init failed"
        return 1
    fi
}

update_ssh_agent () {
    update_ssh_agent_ "$HOME/.tmp/ssh-agent/`hostname`_local" \
        || update_ssh_agent_ "$HOME/.tmp/ssh-agent/`hostname`"
}

update_ssh_agent_ () {
    local agent="$1"
    if [ -z "$agent" ]; then
        return 1
    fi

    if [ -S "$agent" ]; then
        if [ ! "$SSH_AUTH_SOCK" -ef "$agent" ]; then
            export SSH_AUTH_SOCK_OLD=$SSH_AUTH_SOCK
        fi

        export SSH_AUTH_SOCK=$agent
        return 0
    elif [ ! -S "$SSH_AUTH_SOCK" ]; then
        echo "no ssh-agent"
        if [ -L "$agent" ]; then
            rm -rf $agent
        fi
        if [ -n "$SSH_AUTH_SOCK_OLD" ]; then
            if [ -S "$SSH_AUTH_SOCK_OLD" ]; then
                SSH_AUTH_SOCK=$SSH_AUTH_SOCK_OLD
            fi
            unset SSH_AUTH_SOCK_OLD
            update_ssh_agent
        fi
    elif [ ! -L "$SSH_AUTH_SOCK" ]; then
        ssh-add -l >/dev/null \
            && ln -snf "$SSH_AUTH_SOCK" $agent && export SSH_AUTH_SOCK=$agent
    fi
}

# X Window Setup
function get_xserver ()
{
    case $TERM in
        xterm )
            XSERVER=$(who am i | awk '{print $NF}' | tr -d ')''(' ) 
            XSERVER=${XSERVER%%:*}
            ;;
        aterm | rxvt)
        # find some code that works here.....
            ;;
    esac  
}

if [ -z ${DISPLAY:=""} ]; then
    get_xserver
    if [[ -z ${XSERVER}  || ${XSERVER} == $(hostname) || ${XSERVER} == "unix" ]]; then 
        DISPLAY=":0.0"          # Display on local host
    else                
        DISPLAY=${XSERVER}:0.0  # Display on remote host
    fi
fi

export DISPLAY

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

# PATH setup
export PYTHONPATH=$PYTHONPATH:$HOME/gprog/scan-scripts
export PATH=$PATH:$HOME/gprog/scan-scripts/bin
export PATH=$PATH:$HOME/gprog/emacs-settings

# customize bashrc
# if you have jsk bashrc, source it
if [ -e $HOME/.bashrc.jsk ]; then
    source $HOME/.bashrc.jsk
fi

# os dependent files
OS=`uname`
if [ "$OS" = "CYGWIN_NT-5.1" -o "$OS" = "CYGWIN_NT-6.0" ] ; then
    if [ -e $HOME/.bashrc.cygwin ]; then
        quiet_echo loading cygwin setup file ...
        source $HOME/.bashrc.cygwin
    fi
    if [ -e $HOME/.bashrc.cygwin.jsk ]; then
        quiet_echo loading jsk setup file ...
        source $HOME/.bashrc.cygwin.jsk
    fi
elif [ "$OS" = "Linux" ] ; then
    if [ -e $HOME/.bashrc.linux ]; then
        quiet_echo loading linux setup file ...
        source $HOME/.bashrc.linux
    fi
elif [ "$OS" = "Darwin" ] ; then
    if [ -e $HOME/.bashrc.darwin ]; then
        quiet_echo loading darwin setup file ...
        source $HOME/.bashrc.darwin
    fi
fi

# ros bashrc
if [ -e $HOME/.bashrc.cturtle.ros ]; then
    quiet_echo loading ros setup file ...
    if [ -x `which rospack` ]; then
        source $HOME/.bashrc.cturtle.ros
    fi
fi

# customizing bashrc?
if [ -e $HOME/.bashrc.mine ]; then
    quiet_echo loading customizing setup file ...
    source $HOME/.bashrc.mine
fi

