# -*- mode: shell-script -*-
# -*- coding: utf-8 -*-
umask 022

#zsh
autoload -U colors
colors
autoload -U compinit
compinit
setopt correct
setopt beep

setopt list_types
setopt auto_list
setopt auto_menu
setopt magic_equal_subst
setopt auto_cd
setopt auto_param_keys
setopt pushd_ignore_dups
setopt auto_pushd

watch="all"
log

local GREEN=$'%{\e[1;32m%}'
local YELLOW=$'%{\e[1;33m%}'
local BLUE=$'%{\e[1;34m%}'
local LIGHT_BLUE=$'%{\e[1;36m%}'
local DEFAULT=$'%{\e[1;0m%}'
if [ "$TERM" = "emacs" ] ; then
    PROMPT="${LIGHT_BLUE}Yes, Master${DEFAULT}@${GREEN}${HOST}?${DEFAULT} [${BLUE}%/${DEFAULT}]%% "
else
    PROMPT="${LIGHT_BLUE}Yes, Master${DEFAULT}@${GREEN}${HOST}?${DEFAULT} [${BLUE}%/${DEFAULT}]%% "
fi

PROMPT2="%_%% "
SPROMPT="%r? べ, 別にあんたのために修正したんじゃないからね! [n,y,a,e]:"

HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt hist_ignore_dups     # ignore duplication command history list
setopt share_history        # share command history data
bindkey -e

#alias
#alias ls='\ls -GF --color=auto'
alias cp='cp -v'
alias mv='mv -v'
alias grep='grep --color=auto'
alias sbcl="kasabake clbuild lisp"

#ssh-agent
# you always need to cal init_ssh_agent when you want to activate ssh-agent
init_ssh_agent () {
    eval `ssh-agent`
    mkdir -p $HOME/.tmp/ssh-agent/
    ssh-add
    if [ $? = "0" ]; then
        local agent="$HOME/.tmp/ssh-agent/`hostname`_local"
        ln -snf "$SSH_AUTH_SOCK" $agent && export SSH_AUTH_SOCK=$agent
    else
        echo "init failed"
        return 1
    fi
}

update_ssh_agent () {
    update_ssh_agent_ "$HOME/.tmp/ssh-agent/`hostname`_local" \
        || update_ssh_agent_ "$HOME/.tmp/ssh-agent/`hostname`"
}

update_ssh_agent_ () {
    local agent="$1"
    if [ -z "$agent" ]; then
        return 1
    fi

    if [ -S "$agent" ]; then
        if [ ! "$SSH_AUTH_SOCK" -ef "$agent" ]; then
            export SSH_AUTH_SOCK_OLD=$SSH_AUTH_SOCK
        fi

        export SSH_AUTH_SOCK=$agent
        return 0
    elif [ ! -S "$SSH_AUTH_SOCK" ]; then
        echo "no ssh-agent"
        if [ -L "$agent" ]; then
            rm -rf $agent
        fi
        if [ -n "$SSH_AUTH_SOCK_OLD" ]; then
            if [ -S "$SSH_AUTH_SOCK_OLD" ]; then
                SSH_AUTH_SOCK=$SSH_AUTH_SOCK_OLD
            fi
            unset SSH_AUTH_SOCK_OLD
            update_ssh_agent
        fi
    elif [ ! -L "$SSH_AUTH_SOCK" ]; then
        ssh-add -l >/dev/null \
            && ln -snf "$SSH_AUTH_SOCK" $agent && export SSH_AUTH_SOCK=$agent
    fi
}

# X Window Setup
function get_xserver ()
{
    case $TERM in
        xterm )
            XSERVER=$(who am i | awk '{print $NF}' | tr -d ')''(' ) 
            XSERVER=${XSERVER%%:*}
            ;;
        aterm | rxvt)
        # find some code that works here.....
            ;;
    esac  
}

if [ -z ${DISPLAY:=""} ]; then
    get_xserver
    if [[ -z ${XSERVER}  || ${XSERVER} == $(hostname) || ${XSERVER} == "unix" ]]; then 
        DISPLAY=":0.0"          # Display on local host
    else                
        DISPLAY=${XSERVER}:0.0  # Display on remote host
    fi
fi

export DISPLAY

# PATH setup
export PYTHONPATH=$PYTHONPATH:$HOME/gprog/scan-scripts
export PATH=$PATH:$HOME/gprog/scan-scripts/bin
export PATH=$PATH:$HOME/gprog/emacs-settings
export PATH=$PATH:$HOME/gprog/clbuild
export PATH=$PATH:$HOME/gprog/garaemon-install

if [ -e $HOME/.zshrc.jsk ]; then
    echo loading jsk setup file ...
    source $HOME/.zshrc.jsk
fi

OS=`uname`
if [ "$OS" = "CYGWIN_NT-5.1" -o "$OS" = "CYGWIN_NT-6.0" ] ; then
    if [ -e $HOME/.zshrc.cygwin ]; then
        echo loading cygwin setup file ...
        source $HOME/.zshrc.cygwin
    fi
    if [ -e $HOME/.zshrc.cygwin.jsk ]; then
        echo loading jsk setup file ...
        source $HOME/.zshrc.cygwin.jsk
    fi
elif [ "$OS" = "Linux" ] ; then
    if [ -e $HOME/.zshrc.linux ]; then
        echo loading linux setup file ...
        source $HOME/.zshrc.linux
    fi
elif [ "$OS" = "Darwin" ] ; then
    if [ -e $HOME/.zshrc.darwin ]; then
        echo loading darwin setup file ...
        source $HOME/.zshrc.darwin
    fi
fi

# ros zshrc
if [ -e $HOME/.zshrc.cturtle.ros ]; then
    echo loading ros setup file ...
    source $HOME/.zshrc.cturtle.ros
fi

# customizing zshrc?
if [ -e $HOME/.zshrc.mine ]; then
    echo loading customizing setup file ...
    source $HOME/.zshrc.mine
fi

if [ "${TERM}" = screen-bce -o "${TERM}" = screen ]; then
    preexec() {
        echo -ne "\ek#${1%% *}\e\\"
    }
    precmd() {
        echo -ne "\ek$(basename $(pwd))\e\\"
        
    }
fi

export PATH=$PATH:$HOME/gprog/kasabake

export LANG=utf-8

source $HOME/.zshrc.kasabake.util
